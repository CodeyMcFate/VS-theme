[ // #region "TypeScript REACT (TSX)" --------------------------------------------------
    // #region TS INTERFACE START HERE
    {
        "name": "Interface and Type Aliase definition keyword",
        "scope": [
            "source storage.type.enum",
            "source storage.type.interface",
            "source storage.type.type"
        ],
        "settings": {
            "foreground": "#D25C",
            "fontStyle": "bold"
        }
    },
    {
        "name": "Interface and Type Aliase definition name",
        "scope": [
            "source meta.interface entity.name.type.interface",
            "entity.name.type.alias"
        ],
        "settings": {
            "foreground": "#EDAC",
            "fontStyle": "bold"
        }
    },
    {
        "name": "Property Definition in Interface",
        "scope": [
            "source meta.interface meta.definition.property variable.object.property"
        ],
        "settings": {
            "foreground": "#ADCD",
            "fontStyle": ""
        }
    },
    {
        "name": "Primitive Annotation in Interface and Type Aliase",
        "scope": [
            "source meta.interface meta.type.annotation support.type.primitive",
            "source meta.type.declaration support.type.primitive"
        ],
        "settings": {
            "foreground": "#FC5D", //  "#E7BB",
            "fontStyle": ""
        }
    },
    {
        "name": "Entity Name Type Annotation in Interface and Type Aliases",
        "scope": [
            "source meta.interface meta.type.annotation entity.name.type",
            "source meta.type.declaration entity.name.type",
            "source meta.type.declaration meta.type.function.return meta.type.parameters entity.name.type",
            "source meta.function meta.block meta.type.parameters entity.name.type"
        ],
        "settings": {
            "foreground": "#FC5D", //  "#E7BB",
            "fontStyle": ""
        }
    },
    // #endregion TS INTERFACE END HERE
    {
        "name": "Types",
        "scope": [
            "source meta.type.declaration meta.type.parameters entity.name.type",
            "source meta.function meta.type.parameters entity.name.type"
        ],
        "settings": {
            "foreground": "#FC5C",
            "fontStyle": "bold"
        }
    },
    {
        "name": "Types",
        "scope": [
            "source entity.name.type",
            "source meta.parameters entity.name.type",
            "source meta.type.annotation meta.type.parameters entity.name.type",
            "source meta.type.annotation",
            "source meta.type.parameters entity.name.type",
            "source type.annotation"
        ],
        "settings": {
            "foreground": "#FC5D",
            "fontStyle": ""
        }
    },
    {
        "name": "Types primitives",
        "scope": [
            "source meta.type.annotation meta.type.parameters support.type.primitive",
            "source support.type.primitive"
        ],
        "settings": {
            "foreground": "#FC5D", //  "#E7BB",  "#FC5D",
            "fontStyle": ""
        }
    },
    {
        "name": "Functions",
        "scope": [
            "source entity.name.function",
            "source meta.definition.function entity.name.function",
            "source meta.definition.method",
            "source meta.definition.variable entity.name.function",
            "source meta.field.declaration"
        ],
        "settings": {
            "foreground": "#FC5D" /* !!E->D !#FC5E!*/,
            "fontStyle": ""
        }
    },
    {
        "name": "Function Like",
        "scope": [
            "source support.function.builtin",
            "source support.function.git-rebase",
            "source support.function",
            "source support.function.math",
            "source support.function.process"
            // "source support.function.console"
        ],
        "settings": {
            "foreground": "#FC5C",
            "fontStyle": "bold italic"
        }
    },
    {
        "name": "New Class",
        "scope": [
            "source entity.other.inherited-class",
            "source new.expr entity.name.type"
        ],
        "settings": {
            "foreground": "#FC5C",
            "fontStyle": "bold"
        }
    },
    {
        "name": "Function Return Type",
        "scope": [
            "source meta.return.type entity.name.type",
            "source meta.return.type support.type.primitive"
        ],
        "settings": {
            "foreground": "#4B9C",
            "fontStyle": "bold italic"
        }
    },
    {
        "name": "Function Return Type parameter name type",
        "scope": [
            "source meta.return.type meta.type.parameters entity.name.type"
        ],
        "settings": {
            "foreground": "#FC5D",
            "fontStyle": "italic"
        }
    },
    {
        "name": "Function Return Type parameter primitive type",
        "scope": [
            "source meta.return.type meta.type.parameters support.type.primitive"
        ],
        "settings": {
            "foreground": "#E7BB", // "#FC5E",  "#E7BB",
            "fontStyle": "italic"
        }
    },
    {
        "name": "Function Return Type parameter punctuation",
        "scope": [
            "source meta.return.type meta.type.parameters punctuation.definition.typeparameters",
            "source meta.return.type meta.type.tuple meta.brace.square",
            "source meta.return.type keyword.operator.type"
        ],
        "settings": {
            "foreground": "#EDAD",
            "fontStyle": ""
        }
    },
    {
        "name": "Types",
        "scope": [
            "source entity.name.type.class",
            "source entity.name.type.enum",
            "source entity.name.type.instance",
            "source entity.name.type.module"
        ],
        "settings": {
            "foreground": "#EDAC",
            "fontStyle": "bold"
        }
    },
    {
        "name": "Entitys",
        "scope": [
            "source punctuation.definition.template-expression.begin",
            "source punctuation.definition.template-expression.end",
            "source punctuation.definition.parameters.begin",
            "source punctuation.definition.parameters.end",
            "source meta.brace.angle",
            "source meta.brace.round",
            "source meta.brace.square",
            "source punctuation.definition.block",
            "source entity.function",
            "source entity.name",
            "source entity.other.attribute-name.css",
            "source entity.other.attribute-name.directive",
            "source entity.other.attribute-name",
            "source entity.other.inherited-class",
            "source entity.static"
        ],
        "settings": {
            "foreground": "#EDAD",
            "fontStyle": ""
        }
    },
    {
        "name": "Entitys",
        "scope": [
            "source meta.decorator entity.name",
            "source meta.decorator entity.name.function",
            "source meta.decorator meta.function-call entity.name",
            "source meta.decorator variable.other.readwrite"
        ],
        "settings": {
            "foreground": "#EDAC",
            "fontStyle": "bold"
        }
    },
    {
        "name": "regexp constants",
        "scope": [
            "source string.regexp constant.other.character-class.set.regexp"
        ],
        "settings": {
            "foreground": "#E67D" /* !!E->D !#E67E!*/,
            "fontStyle": ""
        }
    },
    {
        "name": "regexp string",
        "scope": [
            "source meta.var.expr string.regexp"
        ],
        "settings": {
            "foreground": "#9C8D" /* !!E->D !#9C8E!*/,
            "fontStyle": ""
        }
    },
    {
        "name": "regexp other punctuation",
        "scope": [
            "source string.regexp punctuation.definition.character-class.regexp"
        ],
        "settings": {
            "foreground": "#FC5D" /* !!E->D !#FC5E!*/,
            "fontStyle": ""
        }
    },
    /*
  source support.function.promise
  support.class.console
  support.function.console
      */
    // console.log etc ...
    // console.log etc ...
    // console.log etc ...
    {
        "name": "console function",
        "scope": [
            "source support.function.console"
        ],
        "settings": {
            "foreground": "#FC5C",
            "fontStyle": "bold italic"
        }
    },
    {
        "name": "console class",
        "scope": [
            "source support.class.console"
        ],
        "settings": {
            "foreground": "#4B9C",
            "fontStyle": "bold"
        }
    },
    {
        "name": "regexp punctuation",
        "scope": [
            "source support.function.promise"
        ],
        "settings": {
            "foreground": "#F91C",
            "fontStyle": "bold italic"
        }
    },
    {
        "name": "regexp punctuation",
        "scope": [
            "source string.regexp punctuation.definition.string.begin",
            "source string.regexp punctuation.definition.string.end"
        ],
        "settings": {
            "foreground": "#F91C",
            "fontStyle": "bold"
        }
    },
    {
        "name": "Variables",
        "scope": [
            "source variable.other.enummember",
            "source variable.arguments",
            "source variable.class",
            "source variable.language.arguments",
            "source variable.language",
            "source variable.name",
            "source variable.other.constant.object",
            "source variable.other.constant",
            "source variable.other.readwrite.alias",
            "source meta.array-binding-pattern-variable variable.other.constant",
            "source variable.other.readwrite",
            "source variable.other.readwrite",
            "source variable.other.regexp",
            "source variable.other",
            "source variable.parameter",
            "source variable",
            "source meta.array-binding-pattern-variable variable.other.constant",
            "source meta.object-binding-pattern-variable variable.other.constant"
        ],
        "settings": {
            "foreground": "#ADCD"
        }
    },
    {
        "name": "Other Constant",
        "scope": [
            "source meta.object-binding-pattern-variable variable.other.constant",
            "source meta.object.member meta.object-literal.key",
            "source meta.objectliteral meta.object.member",
            "source meta.var.expr meta.object-literal.key",
            "source variable.object.property",
            "source variable.other.constant.object.property",
            "source variable.other.constant.property",
            "source variable.other.property"
        ],
        "settings": {
            "foreground": "#6BFD"
        }
    },
    {
        "name": "support properties",
        "scope": [
            /*         "source support.variable.property",
          "source support.variable.property.importmeta",
          "source support.variable.property.process",
          "source support.variable.property.target",
          "source support.type.property-name",
          "source support.type.property-name.css",
          "source support.property-value",
          "source support.property-value.scss", */
            "source support.constant.property.math"
        ],
        "settings": {
            "foreground": "#6BFC",
            "fontStyle": "bold italic"
        }
    },
    {
        "name": "support properties",
        "scope": [
            "source support.variable.property",
            "source support.variable.property.importmeta",
            "source support.variable.property.process",
            "source support.variable.property.target",
            "source support.type.property-name",
            "source support.type.property-name.css",
            "source support.property-value",
            "source support.property-value.scss"
            // "source support.constant.property.math"
        ],
        "settings": {
            "foreground": "#6BFD",
            "fontStyle": "bold"
        }
    },
    {
        "name": "Constants",
        "scope": [
            "source constant",
            "source constant.character.escape.backslash.regexp",
            "source constant.character.numeric.regexp",
            "source constant.language",
            "source constant.language.import-export-all",
            "source constant.other.character-class.range.regexp",
            "source constant.other.character-class.regexp",
            "source constant.other.character-class.set.regexp",
            "source constant.rgb-value",
            "source constant.sha.git-rebase",
            "source constant.character.escape",
            "source support.constant.property-value.css",
            "source constant.numeric",
            "source constant.numeric.binary",
            "source constant.numeric.decimal",
            "source constant.numeric.hex",
            "source constant.numeric.octal"
        ],
        "settings": {
            "foreground": "#E67D" /* !!E->D !#E67E!*/,
            "fontStyle": ""
        }
    },
    {
        "name": "Strings",
        "scope": [
            "source string",
            "source string.constant.other.placeholder",
            "source string.entity",
            "source string.escape",
            "source string.quoted.double",
            "source string.quoted.single",
            "source string.regexp",
            "source string.tag",
            "source string.template",
            "source string.value"
        ],
        "settings": {
            "foreground": "#CE5D"
        }
    },
    {
        "name": "ARROW FUNCTION STYLE",
        "scope": [
            "source storage.type.function.arrow"
        ],
        "settings": {
            "fontStyle": "bold"
        }
    },
    {
        "name": "FUNCTION KEYWORD STYLE",
        "scope": [
            "source storage.type.function"
        ],
        "settings": {
            "fontStyle": "bold italic"
        }
    },
    {
        "name": "FUNCTION KEYWORD OR ARROW COLOUR",
        "scope": [
            "source storage.type.function",
            "source storage.type.function.arrow"
        ],
        "settings": {
            "foreground": "#7C2C"
        }
    },
    {
        "name": "CLASS KEYWORD DEFINITION",
        "scope": [
            "source storage.type.class"
        ],
        "settings": {
            "foreground": "#FC5C",
            "fontStyle": "bold italic"
        }
    },
    {
        "name": "Constructor Keyword",
        "scope": [
            "source meta.method.declaration storage.type"
        ],
        "settings": {
            "foreground": "#D25C",
            "fontStyle": "bold italic"
        }
    },
    {
        "name": "Extends, Get, Implements, Private, Public, Set, etc...",
        "scope": [
            "source meta.class storage.modifier",
            "source meta.method.declaration storage.modifier",
            "source storage.type.property"
        ],
        "settings": {
            "foreground": "#F91D" /* !!E->D !#F91E!*/,
            "fontStyle": ""
        }
    },
    {
        "name": "NEW KEYWORD DEFINITION",
        "scope": [
            "source keyword.control.new",
            "source keyword.operator.new"
        ],
        "settings": {
            "foreground": "#F91C",
            "fontStyle": "bold"
        }
    },
    {
        "name": "ASYNC KEYWORD DEFINITION",
        "scope": [
            "source meta.method.declaration storage.modifier.async",
            "source storage.modifier.async"
        ],
        "settings": {
            "foreground": "#F91C",
            "fontStyle": "bold italic"
        }
    },
    {
        "name": "VARIABLE SUPER",
        "scope": [
            "source variable.language.super"
        ],
        "settings": {
            "foreground": "#E1AC" /* !!E->D !#E1AE!*/,
            "fontStyle": "bold italic"
        }
    },
    {
        "name": "VARIABLE THIS",
        "scope": [
            "source variable.language.this"
        ],
        "settings": {
            "foreground": "#E67C" /* !!E->D !#E67E!*/,
            "fontStyle": "bold italic"
        }
    },
    // import is italic
    {
        "name": "Import variables are italic",
        "scope": [
            "source meta.import variable.other.readwrite.alias",
            "source meta.import variable.other.readwrite"
        ],
        "settings": {
            "foreground": "#ADCD",
            "fontStyle": "italic"
        }
    },
    {
        "name": "Import variables are italic",
        "scope": [
            "source meta.import punctuation.definition.block"
        ],
        "settings": {
            "foreground": "#FD0C",
            "fontStyle": "bold italic"
        }
    },
    //     "source constant.language.import-export-all",
    {
        "name": "Star in import expor all",
        "scope": [
            "source constant.language.import-export-all"
        ],
        "settings": {
            "foreground": "#E67C",
            "fontStyle": "bold"
        }
    },
    {
        "name": "Import strings are italic",
        "scope": [
            "source meta.import string.quoted.single",
            "source meta.import string.quoted.double"
        ],
        "settings": {
            "foreground": "#CE5D",
            "fontStyle": "italic"
        }
    },
    {
        "name": "Import default as and From",
        "scope": [
            "source meta.import keyword.control.as",
            "source meta.import keyword.control.default",
            "source meta.import keyword.control.from",
            "source meta.import keyword.control.import"
        ],
        "settings": {
            "foreground": "#D25C",
            "fontStyle": "bold italic"
        }
    },
    {
        "name": "Enum, Export, Import, Interface, Namespace, Type, etc",
        "scope": [
            "source storage.type.internaldeclaration",
            "source storage.type.namespace",
            "source storage.type",
            "source keyword.control.from",
            "source keyword.control.import",
            "source keyword.control.export",
            "source meta.export.default keyword.control.default"
        ],
        "settings": {
            "foreground": "#D25C",
            "fontStyle": "bold"
        }
    },
    {
        "name": "KEYWORD.CONTROL others ETC.",
        "scope": [
            "source keyword.control.as",
            "source keyword.control.default",
            "source keyword.control",
            "source keyword.control.anchor.regexp",
            "source keyword.control.conditional",
            "source keyword.control.less",
            "source keyword.control.loop",
            "source keyword.control.module",
            "source keyword.control.require",
            "source keyword.control.switch",
            "source keyword.control.trycatch",
            "source keyword.control.with",
            "source keyword",
            "source keyword.other",
            "source keyword.generator.asterisk",
            "source meta.block keyword.control.flow",
            "source keyword.operator.logical",
            "source storage.type.numeric.bigint"
        ],
        "settings": {
            "foreground": "#D25D",
            "fontStyle": ""
        }
    },
    {
        "name": "STORAGE TYPE => LET CONST etc ....",
        "scope": [
            "source storage.type"
        ],
        "settings": {
            "foreground": "#D25C",
            "fontStyle": "bold italic"
        }
    },
    {
        "name": "STORAGE TYPE => LET CONST etc ....",
        "scope": [
            "source meta.block meta.var.expr storage.type"
        ],
        "settings": {
            "foreground": "#D25D",
            "fontStyle": "italic"
        }
    },
    {
        "scope": [
            "source punctuation.decorator"
        ],
        "settings": {
            "foreground": "#D25C",
            "fontStyle": "bold"
        }
    },
    {
        "scope": [
            "source constant.language.boolean.false"
        ],
        "settings": {
            "foreground": "#E43C",
            "fontStyle": "bold italic"
        }
    },
    {
        "scope": [
            "source constant.language.boolean.true"
        ],
        "settings": {
            "foreground": "#7C2C",
            "fontStyle": "bold italic"
        }
    },
    {
        "scope": [
            "source constant.language.undefined"
        ],
        "settings": {
            "foreground": "#A7BA",
            "fontStyle": "bold italic"
        }
    },
    {
        "scope": [
            "source constant.language.null"
        ],
        "settings": {
            "foreground": "#E67C",
            "fontStyle": "bold italic"
        }
    },
    {
        "scope": [
            "source support.type.builtin"
        ],
        "settings": {
            "foreground": "#E7BB",
            "fontStyle": ""
        }
    },
    {
        "scope": [
            "source constant.language.infinity",
            "source constant.language.nan"
        ],
        "settings": {
            "foreground": "#7ADC",
            "fontStyle": "bold italic"
        }
    },
    {
        "name": "Operators",
        "scope": [
            "source keyword.operator.arithmetic",
            "source keyword.operator.assignment.compound.bitwise",
            "source keyword.operator.assignment.compound",
            "source keyword.operator.bitwise.shift",
            "source keyword.operator.bitwise",
            "source keyword.operator.decrement",
            "source keyword.operator.increment",
            "source keyword.operator.definiteassignment",
            "source keyword.operator",
            "source keyword.operator.comparison",
            "source keyword.operator.ternary",
            "source punctuation.separator.key-value",
            "source keyword.operator.assignment",
            "source keyword.operator.type.annotation",
            "source keyword.operator.expression.delete",
            "source keyword.operator.expression.import",
            "source keyword.operator.expression.in",
            "source keyword.operator.expression.infer",
            "source keyword.operator.expression.instanceof",
            "source keyword.operator.expression.is",
            "source keyword.operator.expression.keyof",
            "source keyword.operator.expression.of",
            "source keyword.operator.expression.typeof",
            "source keyword.operator.expression.void",
            "source keyword.operator.negation.regexp",
            "source keyword.operator.optional",
            "source keyword.operator.or.regexp",
            "source keyword.operator.quantifier.regexp",
            "source keyword.operator.relational",
            "source keyword.operator.type.modifier",
            "source keyword.operator.type"
        ],
        "settings": {
            "foreground": "#4B9C",
            "fontStyle": ""
        }
    },
    {
        "scope": [
            "source keyword.operator.spread",
            "source keyword.operator.rest"
        ],
        "settings": {
            "foreground": "#4B9A",
            "fontStyle": "bold"
        }
    },
    {
        "name": "Others",
        "scope": [
            "source *link*",
            "source *uri*",
            "source *url*",
            "source case-clause.expr ",
            "source case-clause.expr",
            "source cast.expr",
            "source header",
            "source keyword.other.back-reference.regexp",
            "source keyword.other.unit",
            "source markup.changed",
            "source markup.deleted",
            "source markup.heading",
            "source markup.inline.raw",
            "source markup.inserted",
            "source markup.punctuation.list.beginning",
            "source markup.punctuation.quote.beginning",
            "source markup.underline",
            "source module.node",
            "source new.expr",
            "source prototype",
            "source punctuation.definition.binding-pattern.array",
            "source punctuation.definition.binding-pattern.object",
            "source source.embedded",
            "source switch-block.expr",
            "source switch-expression.expr",
            "source switch-statement.expr",
            "source variable.other.object",
            "source meta.object.member variable.other.object"
        ],
        "settings": {
            "foreground": "#EDAD",
            "fontStyle": ""
        }
    },
    {
        "scope": [
            "source support.class",
            "source support.class.builtin",
            "source support.class.node",
            "source support.class.promise",
            "source support.constant",
            "source support.constant",
            "source support.constant.math",
            "source support.type",
            "source support.type.object.module",
            "source support.variable",
            "source support.variable.object.node",
            "source support.variable.object.process"
            // "source support.class.console"
        ],
        "settings": {
            "foreground": "#EDAD",
            "fontStyle": ""
        }
    },
    {
        "scope": [
            "source emphasis",
            "source markup.bold",
            "source strong"
        ],
        "settings": {
            "foreground": "#EDAC",
            "fontStyle": "bold"
        }
    },
    {
        "scope": [
            "source markup.italic"
        ],
        "settings": {
            "foreground": "#EDAC",
            "fontStyle": "italic"
        }
    },
    {
        "scope": [
            "source punctuation.quasi",
            "source string.quasi",
            "source invalid",
            "source invalid.illegal",
            "source invalid.illegal.newline"
        ],
        "settings": {
            "foreground": "#D25D",
            "fontStyle": ""
        }
    },
    {
        "scope": [
            "source invalid.deprecated"
        ],
        "settings": {
            "foreground": "#D25C",
            "fontStyle": "underline"
        }
    },
    // #endregion
]
