// will redo the coregraphie to see if it all work perfectly
// git merge --squash --verify-signatures --signoff --progress --verbose version/dev-pop-n-lock-theme-code@next && git add . --verbose && git commit -am "All changes on version/@next will be Pack N Publis"

// git add . --verbose ; git commit -am "Will merge-squash in master" ; git push --follow-tags --all --verbose && git checkout master
// git merge --squash --verify-signatures --signoff --progress --verbose version/dev-pop-n-lock-theme-code@next
// version/dev-pop-n-lock-theme-code@next

// git add . --verbose && git commit -am "resolving merge-squash in master" --verbose
// git merge --squash --verify-signatures --signoff --progress --verbose version/dev-pop-n-lock-theme-code@next
// git add . --verbose && git commit -am "All changes on version/@next will be Pack N Publis"
// git push --follow-tags --all --verbose
// git checkout version/dev-pop-n-lock-theme-code@next


// git add . --verbose && git commit -am "Will merge-squash in master" && git push --follow-tags --all --verbose && git checkout master

//
// git merge --squash --verify-signatures --signoff --progress --verbose version/dev-pop-n-lock-theme-code@next
// version/dev-pop-n-lock-theme-code@next

// git add . --verbose && git commit -am "Will merge-squash in master" --verbose && git checkout master
// git merge --squash --verify-signatures --signoff --progress --verbose version/dev-pop-n-lock-theme-code@next && git add . --verbose && git commit -am "All changes on version/@next will be Pack N Publis"

// git add . --verbose && git commit -am "Will merge-squash in master" && git push --follow-tags --all --verbose && git checkout master

/*


       --squash, --no-squash
           Produce the working tree and index state as if a real merge happened (except for the merge information), but do not
           actually make a commit, move the HEAD, or record $GIT_DIR/MERGE_HEAD (to cause the next git commit command to create a
           merge commit). This allows you to create a single commit on top of the current branch whose effect is the same as merging
           another branch (or more in case of an octopus).

           --signoff, --no-signoff
           Add Signed-off-by line by the committer at the end of the commit log message. The meaning of a signoff depends on the
           project, but it typically certifies that committer has the rights to submit this work under the same license and agrees to
           a Developer Certificate of Origin (see http://developercertificate.org/ for more information).

           With --no-signoff do not add a Signed-off-by line.

           --verify-signatures, --no-verify-signatures
           Verify that the tip commit of the side branch being merged is signed with a valid key, i.e. a key that has a valid uid: in
           the default trust model, this means the signing key has been signed by a trusted key. If the tip commit of the side branch
           is not signed with a valid key, the merge is aborted.
*/
